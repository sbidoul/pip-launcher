#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Download and run `pip` in the current python environment without installing it. 

This script downloads the latest supported pip version in a `__pip_launcher_cache__`
directory next to it. It then runs pip in the python environment that was used to lauch
it, alleviating the need to install pip in the target python environment.

To force dowloading the latest supported pip version, run the script with a single
`upgrade-pip` argument.

This script works with python 2.7 and 3.5+.

Created by Stéphane Bidoul, based on an idea by Paul Moore
(https://github.com/pypa/pip/issues/11243)

Copyright (c) 2022 Stéphane Bidoul

Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the “Software”), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
"""

from __future__ import print_function

import contextlib
import os
import runpy
import shutil
import subprocess
import sys
import tempfile

try:
    from html.parser import HTMLParser
except ImportError:  # python 2
    from HTMLParser import HTMLParser

try:
    from urllib.request import urlopen
except ImportError:  # python 2
    from urllib2 import urlopen

# TODO use the platform cache directory
pip_launcher_cache_dir = os.path.join(
    os.path.dirname(os.path.realpath(__file__)), "__pip_launcher_cache__"
)
py_version = sys.version_info[:2]
py_version_str = ".".join(str(v) for v in py_version)
pip_root = os.path.join(pip_launcher_cache_dir, py_version_str)


class GetPipIndexParser(HTMLParser, object):
    def __init__(self):
        super(GetPipIndexParser, self).__init__()
        self.anchors = []

    def handle_starttag(self, tag, attrs):
        if tag != "a":
            return
        for attr_name, attr_value in attrs:
            if attr_name == "href":
                self.anchors.append(attr_value)


def get_get_pip_url():
    bootstrap_url = "https://bootstrap.pypa.io/pip"
    index = urlopen(bootstrap_url + "/")
    try:
        parser = GetPipIndexParser()
        parser.feed(index.read().decode("utf-8"))
    finally:
        index.close()
    if (py_version_str + "/") in parser.anchors:
        return "{}/{}/get-pip.py".format(bootstrap_url, py_version_str)
    return "{}/get-pip.py".format(bootstrap_url)


@contextlib.contextmanager
def download_get_pip(get_pip_url):
    get_pip_tmpdir = tempfile.mkdtemp()
    try:
        get_pip_tmppath = os.path.join(get_pip_tmpdir, "get-pip.py")
        get_pip_url_file = urlopen(get_pip_url)
        try:
            with open(get_pip_tmppath, "wb") as get_pip_tmppath_file:
                get_pip_tmppath_file.write(get_pip_url_file.read())
        finally:
            get_pip_url_file.close()
        yield get_pip_tmppath
    finally:
        shutil.rmtree(get_pip_tmpdir)


def download_pip_if_needed():
    # If the pip directory is present, use it.
    if os.path.isdir(os.path.join(pip_root, "pip")):
        return

    # Create the local pip root directory if it does not exist.
    if not os.path.exists(pip_root):
        os.makedirs(pip_root)

    get_pip_url = get_get_pip_url()

    print(
        "Downloading pip to {} using {}...".format(pip_root, get_pip_url),
        file=sys.stderr,
    )

    # Download get-pip.py and run it to download and install pip in pip_root.
    with download_get_pip(get_pip_url) as get_pip_tmppath:
        subprocess.check_call(
            [sys.executable, get_pip_tmppath, "--quiet", "--target", pip_root]
        )

    # Remove everything get-pip.py installed except the pip directory, which is all we
    # need in PYTHONPATH to run pip.
    for f in os.listdir(pip_root):
        if f == "pip":
            continue
        path = os.path.join(pip_root, f)
        if os.path.isdir(path):
            shutil.rmtree(path)
        else:
            os.unlink(path)


def upgrade_pip():
    if os.path.isdir(pip_root):
        shutil.rmtree(pip_root)
    download_pip_if_needed()


def run_pip():
    sys.path.insert(0, pip_root)
    runpy.run_module("pip", run_name="__main__")


def ensure_supported_python():
    if py_version < (3, 5) and py_version != (2, 7):
        print(
            "pip-launcher does not support python {}.".format(py_version_str),
            file=sys.stderr,
        )
        sys.exit(1)


def main():
    ensure_supported_python()

    if sys.argv[1:] == ["upgrade-pip"]:
        upgrade_pip()
        return

    download_pip_if_needed()
    run_pip()


main()
